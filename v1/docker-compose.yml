# Yerelde calismak icin. `docker-compose up` komutunu 
# calistirip `localhost:8080` (docker-machine kullaniliyorsa 
# `[machine-ip]:8080`.

version: "3"
services:
   otelika-api-local-env:
      container_name: otelika-api
      build: 
         context: ./
         dockerfile: Dockerfile
      image: otelika-api-web-server
      environment:
         MYSQL_USER: 'appuser'
         MYSQL_PASSWORD: '123123'
         POLLING_MYSQL_USER: 'appuser'
         POLLING_MYSQL_PASSWORD: '123123'
         LANG: C.UTF-8
         TZ: Asia/Istanbul
         PRODUCTION: 0
      volumes:
        - ./:/var/www/html/v1
        - ./dev/polling.php:/var/www/html/v1/system/config/conf.d/polling_auth.php
        - ./dev/repo_polling:/var/www/html/v1/repository/repo_polling
      networks:
         backend:
            ipv4_address: 172.100.0.2
      ports:
        - "8080:80"

   mysql-server:
      container_name: otelika-db
      # platform: linux/amd64 # remove if you are not using Apple M1 chip
      build:
         context: ./
         dockerfile: Dockerfile-dev-mysql
      environment:
         MYSQL_USER: 'appuser'
         MYSQL_PASSWORD: '123123'
         MYSQL_ROOT_PASSWORD: '123123'
         TZ: Asia/Istanbul
         LANG: C.UTF-8
      volumes:
         - ./data/mysql/sql:/docker-entrypoint-initdb.d
      networks:
         backend:           
            ipv4_address: 172.100.0.3
      ports:
         - '33060:3306'
      expose:
         - '33060'

   mariadb:
      container_name: otelika-db-polling
      # platform: linux/amd64 # remove if you are not using Apple M1 chip
      build:
         context: ./
         dockerfile: mariadb-dev.Dockerfile
      environment:
         MYSQL_USER: 'appuser'
         MYSQL_PASSWORD: '123123'
         MYSQL_ROOT_PASSWORD: '123123'
         TZ: Asia/Istanbul
         LANG: C.UTF-8
         AWS_ACCESS_KEY_ID: AKIAWSKWA2I4Y4IDDDDC
         AWS_SECRET_ACCESS_KEY: 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
      volumes:
         - ./data/mariadb/sql:/docker-entrypoint-initdb.d
      networks:
         backend:           
            ipv4_address: 172.100.0.12
      ports:
         - '33061:3306'
      expose:
         - '33061'

   phpmyadmin:
      container_name: otelika-phpmyadmin
      image: "phpmyadmin/phpmyadmin"
      ports:
         - "8888:80"
      environment:
         PMA_ARBITRARY: "1"
         PMA_HOST: "172.100.0.3"
         PMA_PORT: "3306"
      networks:
         backend:
            ipv4_address: 172.100.0.4

   mongodb:
      container_name: otelika-mongo
      image: mongo
      environment:
         MONGO_INITDB_ROOT_USERNAME: 'appuser'
         MONGO_INITDB_ROOT_PASSWORD: '123123'
      networks:
         backend:
            ipv4_address: 172.100.0.5

   redis:
      container_name: otelika-redis
      image: redis
      networks:
         backend:
            ipv4_address: 172.100.0.11

   # !!! SECURITY NOTICE !!!
   # JSON documents are parsed through a javascript virtual machine, so the web interface can be used for executing malicious javascript on a server.
   # mongo-express should only be used privately for development purposes.
   # mongo-express:
   #    container_name: otelika-mongo-express
   #    image: mongo-express
   #    environment:
   #       ME_CONFIG_MONGODB_SERVER: mongo-container
   #       ME_CONFIG_MONGODB_ADMINUSERNAME: 'appuser'
   #       ME_CONFIG_MONGODB_ADMINPASSWORD: '123123'
   #    networks:
   #       backend:
   #          ipv4_address: 172.100.0.6
   #    ports:
   #       - '8081:8081'
   #    expose:
   #       - '8081'

   # redocly:
   #    image: redocly/redoc
   #    environment:
   #       SPEC_URL: swagger/openapi_procedure_management.json
   #       REDOC_OPTIONS: lazy-rendering
   #    volumes:
   #       - ./docs/:/usr/share/nginx/html/swagger/
   #    networks:
   #       backend:
   #          ipv4_address: 172.100.0.7
   #    ports:
   #       - '9090:80'
   #    expose:
   #       - '80'

   # redocly:
   #    image: httpd:2.4
   #    volumes:
   #       - ./docs/redoc-static.html:/usr/local/apache2/htdocs/index.html
   #    networks:
   #       backend:
   #          ipv4_address: 172.100.0.7
   #    ports:
   #       - '9090:80'
   #    expose:
   #       - '80'

   redocly:
      container_name: otelika-redoc
      image: volbrene/redoc
      environment:
         URLS: "[{url: '/static/swagger-files/docs/openapi_task_management.json', name: 'TaskManagement'}, {url: '/static/swagger-files/docs/openapi_procedure_management.json', name: 'ProcedureManagement'}, {url: '/static/swagger-files/docs/openapi_gis.json', name: 'GIS'}, {url: '/static/swagger-files/docs/openapi_polling.json', name: 'Polling'}, {url: '/static/swagger-files/docs/openapi_student_station.json', name: 'StudentStation'}]"
      volumes:
         - ./docs:/var/www/html/static/swagger-files/docs
      ports:
         - 9090:80
      expose:
         - 80

   postgis:
      container_name: otelika-postgis
      build:
         context: ./
         dockerfile: postgis.Dockerfile
      environment:
         POSTGRES_USER: 'appuser'
         POSTGRES_PASSWORD: '123123'
         POSTGRES_DB: 'gis'
         POSTGIS_ENABLE_OUTDB_RASTERS: 1
         POSTGIS_GDAL_ENABLED_DRIVERS: "GTiff PNG JPEG GIF XYZ"
         TZ: Asia/Istanbul
         LANG: C.UTF-8
      volumes:
         - ./data/postgresql/data:/var/lib/postgresql/data
      networks:
         backend:
            ipv4_address: 172.100.0.8
      ports:
         - '5432:5432'
      expose:
         - '5432'

   pgadmin:
      container_name: otelika-pgadmin
      image: dpage/pgadmin4
      environment:
         PGADMIN_DEFAULT_EMAIL: 'info@kant.ist'
         PGADMIN_DEFAULT_PASSWORD: '123123'
      networks:
         backend:
            ipv4_address: 172.100.0.9
      ports:
         - '54321:80'
      expose:
         - '54321'

   invoker-event:
      container_name: otelika-invoker-event
      image: "kantist/invoker"
      environment:
         ENDPOINT: 'http://172.100.0.2:80/v1/event/event'
         AUTH_STRING: 'Event sJ7ztFiRJf?npIMhtAeLQ&4vBYWCq%O%0qmYA39Sxb&NSkUdi7LUnResfVj5!-U1'
         INTERVAL: 1
      networks:
         backend:
            ipv4_address: 172.100.0.13

   invoker-polling-queue:
      container_name: otelika-invoker-polling-queue
      image: "kantist/invoker"
      environment:
         ENDPOINT: 'http://172.100.0.2:80/v1/polling/cron'
         AUTH_STRING: 'Invoke z6*Ea64a5C*yZVd8&w19WRUzpZ&qkQPsG56CPyNwcW!Ni7gV0F2rTIHwhd0dk5+0'
         INTERVAL: 1
      networks:
         backend:
            ipv4_address: 172.100.0.10

# volumes:
#    - ./repository/repo/gis/data:/opt/geoserver/data_dir

volumes:
  kant_otelika_postgis:

networks:
   backend:
      ipam:
         driver: default
         config:
            - subnet: 172.100.0.0/16
